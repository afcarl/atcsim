23.03.2013
  -- project start
  -- create NetBeans project and directory structure
  -- prepare the environment : install WX and SDL packages (libraries and headers)
  -- linker configuration : put "`sdl-config --libs` `wx-config --libs` -lSDL_image -lSDL_gfx -lSDL_ttf -lSDL" in Properties->Build->Linker->Libraries->Add Option->Other option instead of Command Line -> Additional Options. Thus to have the correct library and object order on the command line (http://webpages.charter.net/ppluzhnikov/linker.html)
  -- run options : no DISPLAY=0 environment variable, Console Type : Internal Terminal

24.03.2013
  -- commit exercise P1 : simulation plateau (main.cpp and MainApp, CEvent, Surface classes)
  -- modify Surface.cpp to add some error checking on SDL functions (return values)
  -- create a Makefile manually to be able to build simply without NetBeans
  -- create and configure a GIT repository at EPFL : git.epfl.ch/repo/atcsim.git

25.03.2013
  -- create a TODO file for new idea to be implemented
  -- create a README file and add indication on how to get, build and run the simulator
  -- add DESCRIPTION, AUTHORS and GIT WORKFLOW sections to README
  -- answer question P2.1 (RESPONSES file)
  -- commit exercise P2 : base objects (Entity class)
  -- switch to ISO C++11 (without GNU extensions) to support std::to_string, compiler flags : -std=c++11 -pedantic (to obtain all the diagnostics required by the standard)
  -- add extra warnings with -Wextra and -Weffc++ (in addition to -Wall)
  -- commit exercise P3 : airplanes (Airplane class)

26.03.2013
  -- Entity class is in fact an interface (like in Java or C#) : rename to IEntity and delete the empty implementation (Entity.cpp)
  -- add line breaks to respect the 80 columns dimension
  -- new benefit of C++11 : std::vector::data returns pointer to the underlying array (OK even if empty)
  -- commit exercise P4 and P5 : forbidden zones and clouds (Polygon, ForbiddenZone and Cloud classes)
  -- undeclare all the empty copy constructors to use the compiler-generated ones
  -- explicitly call base constructor in constructor

29.03.2013
  -- answer question P3.1 (RESPONSES file)
  -- commit exercise P6 : integrate entities (airplanes, forbidden zones and clouds)
  -- use unique_ptr (C++11) for the heterogeneous collection (it guarantees that the pointed object will be destructed at the pointer's end of scope) : std::vector< std::unique_ptr<IEntity> > entities;
  -- use the new range-based for-loop syntax of C++11 to iterate over an entire container : for (unique_ptr<IEntity>& entity : entities) {}
  -- use forward declaration (#include "A.h" ==> class A;) in header files when possible to avoid namespace pollution and reduce build time
  -- refactor the Surface class as object-oriented (unlike SDL) to be easier to use and exception safe (destructor)
  -- lighten the background image

30.03.2013
  -- use new C++11 typed null pointer 'nullptr' instead of NULL (enforced by GCC 4.7 -Wzero-as-null-pointer-constant)
  -- code compile without any warnings (with a lot of them enabled) (except those for unused values from CEvent.cpp)
  -- add debug, release and all (default) targets to the Makefile

02.04.2013
  -- install and use Clang / LLVM to compile the project (shows different errors and warnings, provide us with experiences on Clang / LLVM)
  -- some errors because initializer lists, like new ForbiddenZone({0,250,400,0}, {0,0,200,200}), are only supported since Clang 3.1 (will be shipped with Ubuntu 13.04) (already supported by GCC since 4.4)

03.04.2013
  -- correct Clang compiler warnings. Advantage over GCC : has a -Wheader-hygiene that warn about usage of namespace directive in global context in header. (no need to verify it manually)
  -- leave the Clang warning : 'IEntity' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit. It only impacts compilation time (that we don't really care about) and would require an implementation file to fix it.

10.04.2013
  -- rename MainApp class to Game, CFPS to FPS and CEvent to Events
  -- reorganize functions around Game class and main.cpp (because it's more sequencial code than object)
  -- implement FPS printout in window title
  -- performance optimization : allocate smallest possible Surface size for polygons (insteed of all window) : 30 --> 50 FPS
  -- create CONCEPTION file

12.04.2013
  -- answer question P4.1 (RESPONSES file)
  -- use getFPS() instead of getSpeedFactor to manage object speed because SDL_GetTicks() has a time resolution of 10ms
  -- rename the loop() method to compute(), which is more explicit
  -- implement a computeMovement() method at the Entity class level, then each entitiy inherit of its capability and can call it inside there compute() method
  -- explicitly define the 6 special member functions, eventually using =default or =delete for each class
  -- add throw() to destructor declarations, which indicates that no exceptions are thrown (which is what we want for a destructor)
  -- create Constants.h which contain all the game constants (such as window size)
  -- commit exercise P7 : airplanes and clouds movement

13.04.2013
  -- use a namespace to implement FPS instead of a static class because FPS is more a set of functions than an object

20.05.2013
  -- implement entity position (refPos_) using a struct Point
  -- adapt the wn_PnPoly() function from geomalgorithms.com to our needs : now isInside(), defined by the Polygon class
  -- implement collision checking in the Airplane class only, because a collision always implies an airplane
  -- implement the 3 overiddings (Airplane, Cloud and ForbiddenZone) of the checkForCollision() method, defined by the Airplane class
  -- implement collision checking using double dispatch, dispatcher method checkForCollisionDispatch() (virtually declared in Entity class) calls specialized checkForCollision() methods
  -- commit exercises P8, P9, P10 : collisions handling
  -- answer question P5.1 (RESPONSES file)

21.05.2013
  -- answer question P6.1 (RESPONSES file)
  -- implement collision prediction using a simulated position
  -- modify computeMovement, checkForCollisionDispatch, checkForCollision, isInside, getPosition to accept a position type (real or simulated) argument
  -- new Types.h header defining custom types that aren't classes (struct Point and enum PosStyle)
  -- add a new predictedCollision attribute in Airplane class to indicate predicted collisions, it will be used to print warnings to the user
  -- create a printSidePanelInfo that will print some informations (like warnings) about airplane on the side panel
  -- Airplane::render : draw a line which indicates the predicted airplane trajectory
  -- commit exercise P11 : warning messages
  -- implement airplane selection using onLButtonDown, only one airplane can be selected at a time
  -- change airplane color when selected
  -- implement isInside method for airplanes which return true if a coordinate is inside it
  -- change airplane text information color to orange if warning and red if danger

22.05.2013
  -- improve airplane selection mechanism in onLButtonDown, run through the entity vector only once
  -- add a changeCape method in the Entity class (because the Entity class already implement computeMovement, which is the same for all entities)
  -- call it when an airplane is selected and the user click on the game field
  -- commit exercise P12 : cape modification
  -- implement Entity::updateCape method, which update current cape on each tick up to target cape (called by Airplane::compute)
  -- draw a line between airplane and mouse during cape modification (easier for user to identify the new cape) (Airplane::traceLineFromAirplane)
  -- change Surface class to use SDL TTF_RenderUTF8_Solid for unicode text rendering (used by degree sign)
  -- commit exercise P13 : airplane turn management
  -- answer question P7.1 (RESPONSES file)
  -- add a new Airway class and design airways, modify forbidden zones, add cardinal points (N,S,E,W) to background image


