23.03.2013
  -- project start
  -- create NetBeans project and directory structure
  -- prepare the environment : install WX and SDL packages (libraries and headers)
  -- linker configuration : put "`sdl-config --libs` `wx-config --libs` -lSDL_image -lSDL_gfx -lSDL_ttf -lSDL" in Properties->Build->Linker->Libraries->Add Option->Other option instead of Command Line -> Additional Options. Thus to have the correct library and object order on the command line (http://webpages.charter.net/ppluzhnikov/linker.html)
  -- run options : no DISPLAY=0 environment variable, Console Type : Internal Terminal

24.03.2013
  -- exercise P1 : simulation plateau (main.cpp and MainApp, CEvent, Surface classes)
  -- modify Surface.cpp to add some error checking on SDL functions (return values)
  -- create a Makefile manually to be able to build simply without NetBeans
  -- create and configure a GIT repository at EPFL : git.epfl.ch/repo/atcsim.git

25.03.2013
  -- create a TODO file for new idea to be implemented
  -- create a README file and add indication on how to get, build and run the simulator
  -- add DESCRIPTION, AUTHORS and GIT WORKFLOW sections to README
  -- answer question P2.1 (RESPONSES file)
  -- exercise P2 : base objects (Entity class)
  -- switch to ISO C++11 (without GNU extensions) to support std::to_string, compiler flags : -std=c++11 -pedantic (to obtain all the diagnostics required by the standard)
  -- add extra warnings with -Wextra and -Weffc++ (in addition to -Wall)
  -- exercise P3 : airplanes (Airplane class)

26.03.2013
  -- Entity class is in fact an interface (like in Java or C#) : rename to IEntity and delete the empty implementation (Entity.cpp)
  -- add line breaks to respect the 80 columns dimension
  -- new benefit of C++11 : std::vector::data returns pointer to the underlying array (OK even if empty)
  -- exercise P4 and P5 : forbidden zones and clouds (Polygon, ForbiddenZone and Cloud classes)
  -- undeclare all the empty copy constructors to use the compiler-generated ones
  -- explicitly call base constructor in constructor

29.03.2013
  -- answer question P3.1 (RESPONSES file)
  -- exercise P6 : integrate elements (airplanes, forbidden zones and clouds)
  -- use unique_ptr (C++11) for the heterogeneous collection (it guarantees that the pointed object will be destructed at the pointer's end of scope) : std::vector< std::unique_ptr<IEntity> > entities;
  -- use the new range-based for-loop syntax of C++11 to iterate over an entire container : for (unique_ptr<IEntity>& entity : entities) {}
  -- use forward declaration (#include "A.h" ==> class A;) in header files when possible to avoid namespace pollution and reduce build time
  -- refactor the Surface class as object-oriented (unlike SDL) to be easier to use and exception safe (destructor)
  -- lighten the background image

30.03.2013
  -- use new C++11 typed null pointer 'nullptr' instead of NULL (enforced by GCC 4.7 -Wzero-as-null-pointer-constant)
  -- code compile without any warnings (with a lot of them enabled) (except those for unused values from CEvent.cpp)
  -- add debug, release and all (default) targets to the Makefile

02.04.2013
  -- install and use Clang / LLVM to compile the project (shows different errors and warnings, provide us with experiences on Clang / LLVM)
  -- some errors because initializer lists, like new ForbiddenZone({0,250,400,0}, {0,0,200,200}), are only supported since Clang 3.1 (will be shipped with Ubuntu 13.04) (already supported by GCC since 4.4)

03.04.2013
  -- correct Clang compiler warnings. Advantage over GCC : has a -Wheader-hygiene that warn about usage of namespace directive in global context in header. (no need to verify it manually)
  -- leave the Clang warning : 'IEntity' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit. It only impacts compilation time (that we don't really care about) and would require an implementation file to fix it.


